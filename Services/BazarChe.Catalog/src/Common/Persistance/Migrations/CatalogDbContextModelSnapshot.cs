// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using src.Common.Persistance.Context;

#nullable disable

namespace src.Common.Persistance.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("src.Features.CatalogBrand.Common.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands", "catalog");
                });

            modelBuilder.Entity("src.Features.CatalogCategory.Common.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CatalogCategories", "catalog");
                });

            modelBuilder.Entity("src.Features.CatalogItem.Common.Item", b =>
                {
                    b.Property<string>("Slug")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("integer");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Slug");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatalogCategoryId");

                    b.ToTable("CatalogItems", "catalog");
                });

            modelBuilder.Entity("src.Features.CatalogCategory.Common.Category", b =>
                {
                    b.HasOne("src.Features.CatalogCategory.Common.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("src.Features.CatalogItem.Common.Item", b =>
                {
                    b.HasOne("src.Features.CatalogBrand.Common.Brand", "CatalogBrand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("src.Features.CatalogCategory.Common.Category", "CatalogCategory")
                        .WithMany()
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("src.Features.CatalogMedia.Common.Media", "Medias", b1 =>
                        {
                            b1.Property<string>("ItemSlug")
                                .HasColumnType("character varying(150)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(1098)
                                .HasColumnType("character varying(1098)");

                            b1.HasKey("ItemSlug", "Id");

                            b1.ToTable("CatalogItems", "catalog");

                            b1.ToJson("Medias");

                            b1.WithOwner()
                                .HasForeignKey("ItemSlug");
                        });

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogCategory");

                    b.Navigation("Medias");
                });

            modelBuilder.Entity("src.Features.CatalogCategory.Common.Category", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
